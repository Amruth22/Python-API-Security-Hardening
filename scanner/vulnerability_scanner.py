"""
Vulnerability Scanner
Scans API for common security vulnerabilities
"""

import logging
import requests
from security.security_headers import get_security_header_recommendations

logger = logging.getLogger(__name__)


class VulnerabilityScanner:
    """
    Simple vulnerability scanner for APIs
    """
    
    def __init__(self):
        self.vulnerabilities = []
        logger.info("Vulnerability Scanner initialized")
    
    def scan_endpoint(self, url):
        """
        Scan an endpoint for vulnerabilities
        
        Args:
            url: Endpoint URL to scan
            
        Returns:
            List of vulnerabilities found
        """
        vulnerabilities = []
        
        try:
            # Test 1: Check security headers
            response = requests.get(url, timeout=5)
            header_vulns = self._check_security_headers(response.headers)
            vulnerabilities.extend(header_vulns)
            
            # Test 2: Check for SQL injection vulnerability
            sql_vuln = self._test_sql_injection(url)
            if sql_vuln:
                vulnerabilities.append(sql_vuln)
            
            # Test 3: Check for XSS vulnerability
            xss_vuln = self._test_xss(url)
            if xss_vuln:
                vulnerabilities.append(xss_vuln)
            
            # Test 4: Check authentication
            auth_vuln = self._check_authentication(url)
            if auth_vuln:
                vulnerabilities.append(auth_vuln)
        
        except Exception as e:
            logger.error(f"Error scanning {url}: {e}")
        
        return vulnerabilities
    
    def _check_security_headers(self, headers):
        """Check for missing security headers"""
        vulnerabilities = []
        recommendations = get_security_header_recommendations()
        
        for header_name, info in recommendations.items():
            if header_name not in headers:
                vulnerabilities.append({
                    'type': 'Missing Security Header',
                    'severity': 'Medium',
                    'header': header_name,
                    'recommendation': info['value'],
                    'protection': info['protection']
                })
        
        return vulnerabilities
    
    def _test_sql_injection(self, url):
        """Test for SQL injection vulnerability"""
        # Simple test with SQL injection payload
        test_payload = "' OR '1'='1"
        
        try:
            response = requests.get(f"{url}?id={test_payload}", timeout=5)
            
            # Check if error message reveals SQL
            if 'sql' in response.text.lower() or 'syntax' in response.text.lower():
                return {
                    'type': 'Potential SQL Injection',
                    'severity': 'High',
                    'description': 'Endpoint may be vulnerable to SQL injection',
                    'recommendation': 'Use parameterized queries'
                }
        except:
            pass
        
        return None
    
    def _test_xss(self, url):
        """Test for XSS vulnerability"""
        # Simple XSS test
        test_payload = "<script>alert('xss')</script>"
        
        try:
            response = requests.get(f"{url}?input={test_payload}", timeout=5)
            
            # Check if payload is reflected without encoding
            if test_payload in response.text:
                return {
                    'type': 'Potential XSS',
                    'severity': 'High',
                    'description': 'Endpoint may be vulnerable to XSS',
                    'recommendation': 'Sanitize and encode user input'
                }
        except:
            pass
        
        return None
    
    def _check_authentication(self, url):
        """Check if endpoint requires authentication"""
        try:
            # Try accessing without credentials
            response = requests.get(url, timeout=5)
            
            # If we get 200 without auth, might be issue
            if response.status_code == 200 and '/api/' in url:
                return {
                    'type': 'Missing Authentication',
                    'severity': 'Medium',
                    'description': 'API endpoint accessible without authentication',
                    'recommendation': 'Implement API key or token authentication'
                }
        except:
            pass
        
        return None
    
    def generate_report(self, vulnerabilities):
        """
        Generate vulnerability report
        
        Args:
            vulnerabilities: List of vulnerabilities
            
        Returns:
            Formatted report
        """
        report = {
            'total_vulnerabilities': len(vulnerabilities),
            'high_severity': sum(1 for v in vulnerabilities if v.get('severity') == 'High'),
            'medium_severity': sum(1 for v in vulnerabilities if v.get('severity') == 'Medium'),
            'low_severity': sum(1 for v in vulnerabilities if v.get('severity') == 'Low'),
            'vulnerabilities': vulnerabilities
        }
        
        return report
    
    def print_report(self, report):
        """Print vulnerability report"""
        print("\n" + "=" * 70)
        print("  VULNERABILITY SCAN REPORT")
        print("=" * 70)
        print(f"\nTotal Vulnerabilities: {report['total_vulnerabilities']}")
        print(f"  High Severity: {report['high_severity']}")
        print(f"  Medium Severity: {report['medium_severity']}")
        print(f"  Low Severity: {report['low_severity']}")
        
        if report['vulnerabilities']:
            print("\nFindings:")
            for i, vuln in enumerate(report['vulnerabilities'], 1):
                print(f"\n{i}. {vuln['type']} [{vuln['severity']}]")
                print(f"   Description: {vuln.get('description', 'N/A')}")
                print(f"   Recommendation: {vuln.get('recommendation', 'N/A')}")
        else:
            print("\n[PASS] No vulnerabilities found!")
        
        print("=" * 70)
